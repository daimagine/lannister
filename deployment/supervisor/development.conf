[unix_http_server]
file=/tmp/supervisor.sock                       ; path to your socket file

[supervisord]
logfile=/var/log/supervisord/supervisord.log    ; supervisord log file
logfile_maxbytes=50MB                           ; maximum size of logfile before rotation
logfile_backups=10                              ; number of backed up logfiles
loglevel=error                                  ; info, debug, warn, trace
pidfile=/var/run/supervisord.pid                ; pidfile location
nodaemon=false                                  ; run supervisord as a daemon
minfds=1024                                     ; number of startup file descriptors
minprocs=200                                    ; number of process descriptors
user=root                                       ; default user
childlogdir=/var/log/supervisord/               ; where child log files will live

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock         ; use a unix:// URL  for a unix socket

; This is where you run individual Tornado instances.
; We run four; one per processor core.
; In development, we ran as many as four per core with no issues.
; If you're looking to minimize cpu load, run fewer processes.
; BTW, Tornado processes are single threaded.
; To take advantage of multiple cores, you'll need multiple processes.

[program:lannister-8000]
command=/Users/adikurniawan/Developer/project/jualio/source/py/lannister/run_server.py --port=8000
environment=DEPLOYMENT_TARGET=dev
stderr_logfile = /var/log/supervisord/lannister-stderr.log
stdout_logfile = /var/log/supervisord/lannister-stdout.log

[program:lannister-8002]
command=/Users/adikurniawan/Developer/project/jualio/source/py/lannister/run_server.py --port=8002
environment=DEPLOYMENT_TARGET=staging
stderr_logfile = /var/log/supervisord/lannister-2-stderr.log
stdout_logfile = /var/log/supervisord/lannister-2-stdout.log


[program:celery-sociale]
; Set full path to celery program if using virtualenv
command=celery worker -A sociale --loglevel=DEBUG
directory=/Users/adikurniawan/Developer/project/jualio/source/py
user=nobody
numprocs=1
stdout_logfile=/var/log/celery/sociale-worker.log
stderr_logfile=/var/log/celery/sociale-error.log
autostart=true
autorestart=true
startsecs=10
; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 600
; When resorting to send SIGKILL to the program to terminate it
; send SIGKILL to its whole process group instead,
; taking care of its children as well.
killasgroup=true
; if rabbitmq is supervised, set its priority higher
; so it starts first
priority=998